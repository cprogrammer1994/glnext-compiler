name: deploy

on:
  push:
    branches: [ main ]

  workflow_dispatch:

jobs:

  sdist:
    name: sdist
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: setup
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: deps
        run: python -m pip install -U pip wheel setuptools

      - name: sdist
        run: python setup.py sdist

      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: "dist/*.tar.gz"
          retention-days: 1

  wheel:
    name: wheel
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        # python-version: [3.6, 3.7, 3.8, 3.9]
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2

      - name: vulkan sdk
        if: contains(matrix.os, 'windows')
        run: |
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/1.2.170.0/windows/VulkanSDK-1.2.170.0-Installer.exe" -OutFile VulkanSDK.exe
          $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");
          $installer.WaitForExit();
          $Env:VULKAN_SDK = "C:\VulkanSDK\1.2.170.0"

      - name: vulkan sdk
        if: contains(matrix.os, 'ubuntu')
        run: |
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.2.170-bionic.list https://packages.lunarg.com/vulkan/1.2.170/lunarg-vulkan-1.2.170-bionic.list
          sudo apt-get update && sudo apt-get install -y shaderc

      - name: setup
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: deps
        run: python -m pip install -U pip wheel setuptools

      - name: wheel
        run: python setup.py bdist_wheel

      - name: auditwheel
        if: contains(matrix.os, 'ubuntu')
        run: |
          mv dist audit
          python -m pip install -U auditwheel
          python -m auditwheel repair audit/*-linux_x86_64.whl --plat manylinux2014_x86_64 -w dist

      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: "dist/*.whl"
          retention-days: 1

  # publish:
  #   name: publish
  #   needs:
  #     - sdist
  #     - wheel
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: setup
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.9'

  #     - name: deps
  #       run: python -m pip install -U twine

  #     - name: download
  #       uses: actions/download-artifact@v2

  #     - name: sdist
  #       env:
  #         TWINE_USERNAME: __token__
  #         TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
  #       run: python -m twine upload dist/*.tar.gz

  #     - name: wheels
  #       env:
  #         TWINE_USERNAME: __token__
  #         TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
  #       run: python -m twine upload dist/*.whl
